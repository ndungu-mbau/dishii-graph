type Query {
  hello: String

  tables: [table]
  table(table: Utable!): table

  meals: [meal]
  meal(meal: Umeal!): meal

  instances: [instance]
  instance(instance: Uinstance!): instance

  orders: [order]
  order(order: Uorder!): order
}

type Mutation {
  hello: String

  tables: tableMutations
  meals: mealMutations
  instances: instanceMutations
  orders: orderMutations
}

# table stuff
type table{
  id: String
  seats: Int
  device: String
  number: Int
}

input Itable{
  seats: Int!
  device: String!
  number: Int!
}

input Utable{
  id: String!
  seats: Int
  device: String
  number: Int
}

type tableMutations{
  create(table: Itable!): table
  update(table: Utable!): table
  archive(table: Utable!): table
  restore(table: Utable!): table
}

# meal stuff
type meal{
  id: String
  name: String
  items: [String]
  img: String
  price: Float
}

input Imeal{
  name: String!
  items: [String]!
  img: String!
  price: Float!
}

input Umeal{
  id: String!
  name: String
  items: [String]
  img: String
  price: Float
}

type mealMutations{
  create(meal: Imeal!): meal
  update(meal: Umeal!): meal
  archive(meal: Umeal!): meal
  restore(meal: Umeal!): meal
}

# instance stuff
type instance{
  id: String
  meal: meal
  amount: Int
}

input Iinstance{
  meal: String!
  amount: Int!
}

input Uinstance{
  id: String!
  meal: String
  amount: Int
}

type instanceMutations{
  create(instance: Iinstance!): instance
  update(instance: Uinstance!): instance
  archive(instance: Uinstance!): instance
  restore(instance: Uinstance!): instance
}

# order stuff
type order{
  id: String
  meals: [instance]
  total: Float
}

input Iorder{
  meals: [String]!
  total: Float!
}

input Uorder{
  id: String!
  meals: [String]
  total: Float
}

type orderMutations{
  create(order: Iorder!): order
  update(order: Uorder!): order
  archive(order: Uorder!): order
  restore(order: Uorder!): order
}